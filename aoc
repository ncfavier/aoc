#!/usr/bin/env bash

# usage: aoc [run|edit|submit] [OPTIONS...]
#
# run [-t] [-c] [-r] [-i INPUT] [YEAR] [DAYS...]
#   compile and run the specified days
#
#   -t          time execution
#   -c          only compile the source files
#   -r          only run the binaries
#   -i INPUT    use INPUT as the standard input
#
#   run                 # run the current day
#   run YEAR            # run days 1-25 of YEAR
#   run [YEAR] DAYS...  # run given DAYS of YEAR (defaults to current year)
#
# edit [[YEAR] DAY]
#   open the specified day in $EDITOR with a default template
#
# submit LEVEL ANSWER [[YEAR] DAY]
#   submit an answer

ghcBuildFlags=(
    -O2
    -W
)

ghcFlags=(
    -XAllowAmbiguousTypes
    -XApplicativeDo
    -XBangPatterns
    -XBlockArguments
    -XConstrainedClassMethods
    -XConstraintKinds
    -XDataKinds
    -XDeriveDataTypeable
    -XDeriveFoldable
    -XDeriveFunctor
    -XDeriveGeneric
    -XDeriveLift
    -XDeriveTraversable
    -XDerivingVia
    -XDoAndIfThenElse
    -XEmptyCase
    -XEmptyDataDecls
    -XEmptyDataDeriving
    -XExistentialQuantification
    -XExplicitForAll
    -XExtendedDefaultRules
    -XFlexibleContexts
    -XFlexibleInstances
    -XGADTs
    -XHexFloatLiterals
    -XImportQualifiedPost
    -XInstanceSigs
    -XKindSignatures
    -XLambdaCase
    -XLiberalTypeSynonyms
    -XMonadComprehensions
    -XMultiParamTypeClasses
    -XMultiWayIf
    -XNamedFieldPuns
    -XNamedWildCards
    -XNoMonomorphismRestriction
    -XNumericUnderscores
    -XOverloadedStrings
    -XPatternGuards
    -XPatternSynonyms
    -XParallelListComp
    -XPolyKinds
    -XPostfixOperators
    -XRankNTypes
    -XRecordWildCards
    -XRecursiveDo
    -XRelaxedPolyRec
    -XScopedTypeVariables
    -XStandaloneDeriving
    -XStandaloneKindSignatures
    -XStarIsType
    -XTemplateHaskell
    -XTraditionalRecordSyntax
    -XTupleSections
    -XTypeApplications
    -XTypeOperators
    -XTypeFamilies
    -XTypeSynonymInstances
    -XUnicodeSyntax
    -XViewPatterns
)

log() {
    echo "$(tput setaf 2)✓$(tput sgr0) $*"
}

die() {
    echo "$(tput setaf 1)✗$(tput sgr0) $*" >&2
    exit 1
}

request() {
    session=$(< .session) || die "Please create a .session file containing the session cookie from your web browser"
    curl -fsSL -b "session=$session" "$@"
}

getDays() {
    year=
    days=()

    if (( $# )); then
        for arg do
            [[ $arg == +([0-9]) ]] || die "Invalid argument \`$arg\`"
            if (( arg > 100 )); then
                year=$arg
            else
                days+=("$arg")
            fi
        done
        year=${year:-$(date +%Y)}
        (( ${#days[@]} )) || days=({1..25})
    else
        year=$(date +%Y)
        days=("$(date -d '2 hours' +%-d)")
    fi
}

getDay() {
    year=$1 day=$2
    printf -v module Day%02d "$day"
    src=src/$year/$module.hs input=inputs/$year/$day bin=bin/$year/$day build=build/$year
    url="https://adventofcode.com/$year/day/$day"
}

run() {
    time=0 runOnly=0 compileOnly=0 forceInput=

    while getopts :tcri: o; do case $o in
        t) time=1;;
        c) compileOnly=1;;
        r) runOnly=1;;
        i) forceInput=$OPTARG;;
        :) die "Flag -$OPTARG requires an argument";;
        *) die "Invalid flag -$OPTARG";;
    esac done
    shift "$(( OPTIND - 1 ))"
    getDays "$@"

    runAll() for day in "${days[@]}"; do
        getDay "$year" "$day"

        [[ -e $src ]] || continue
        (( ! runOnly )) && mkdir -p "$(dirname "$input")" "$(dirname "$bin")" "$build"

        if (( ! runOnly )) && [[ ! -e $input ]]; then
            log "Downloading input for day $day, $year"
            request -o "$input" "$url/input" || exit
        fi

        if (( ! runOnly )); then
            log "Compiling day $day, $year"
            ghc "${ghcFlags[@]}" "${ghcBuildFlags[@]}" -isrc -i"src/$year" -outputdir "$build" -o "$bin" -main-is "$module" "$src" || exit
        fi

        if (( ! compileOnly )); then
            export AOC_INPUT=${forceInput:-$input}

            (( ! runOnly )) && log "Running day $day, $year"
            if (( time && ${#days[@]} == 1 )); then
                time "$bin"
            else
                "$bin"
            fi | tee >(tail -n 1 | tr -d '\n' | xsel -ib)
        fi
    done

    if (( time && ${#days[@]} > 1 )); then
        time runAll
    else
        runAll
    fi
}

bios() {
    printf '%s\n' "${ghcFlags[@]}" -isrc -i"${HIE_BIOS_ARG%/*}" AOC Intcode > "$HIE_BIOS_OUTPUT"
}

repl() {
    ghci "${ghcFlags[@]}" src/AOC.hs
}

edit() {
    getDays "$@"
    (( ${#days[@]} == 1 )) || die "Multiple days provided"

    getDay "$year" "${days[0]}"

    if [[ ! -s $src ]]; then
        mkdir -p "${src%/*}"
        cat > "$src" << EOF
module $module where

import AOC

import Data.Map qualified as M
import Data.Set qualified as S

format = do
  takeRest

main :: IO ()
main = do
  input <- parseInput format
  print input
EOF
    fi

    exec $EDITOR "$src"
}

submit() {
    level=$1 answer=$2
    shift 2

    getDays "$@"
    (( ${#days[@]} == 1 )) || die "Multiple days provided"

    getDay "$year" "${days[0]}"

    request --data-raw "level=$level&answer=$answer" "$url/answer" |
    htmlq 'main article' | pandoc -t plain -

    echo "$url#part2"
}

export TZ=EST

(( $# )) || set run

case $1 in
    run|bios|repl|edit|submit) "$@";;
    *) die "Invalid command \`$1\`";;
esac
